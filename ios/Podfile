# Define a global platform for the project (required by CocoaPods)
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Release' => :release,
  'Profile' => :release,
  # Flavored configs
  'Debug-dev' => :debug,
  'Release-dev' => :release,
  'Profile-dev' => :release,
  'Debug-test' => :debug,
  'Release-test' => :release,
  'Profile-test' => :release,
  'Debug-prod' => :debug,
  'Release-prod' => :release,
  'Profile-prod' => :release,
  # removed old 'release' flavor configs
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

## Note: Avoid pre_install Swift mutation to ensure compatibility with Cocoapods 1.16

target 'Runner' do
  use_frameworks!
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # Ensure all Pods targets and configurations use Swift 5.0
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    target.build_configurations.each do |config|
      config.build_settings['SWIFT_VERSION'] = '5.0'
    end
  end
  installer.pods_project.build_configurations.each do |config|
    config.build_settings['SWIFT_VERSION'] = '5.0'
  end

  # Ensure user project targets (Runner/RunnerTests) also use a single Swift version
  installer.aggregate_targets.each do |aggregate|
    aggregate.user_project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['SWIFT_VERSION'] = '5.0'
      end
    end
    aggregate.user_project.build_configurations.each do |config|
      config.build_settings['SWIFT_VERSION'] = '5.0'
    end
  end
end
